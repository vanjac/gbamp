    .align  2
    .global main
    .code   16
    .thumb_func
    .type   main, %function
main:
    @ SETUP INTERRUPTS

    LDR     reg_intr_handle:r0, =0x03007FFC
    LDR     intr_handle_ptr:r1, =intrHandle
    STR     intr_handle_ptr, [reg_intr_handle]

    LDR     reg_ie:r0, =0x04000200
    @ vblank, timer 2, keypad
    LDR     ie:r1, =((1<<0) | (1<<5) | (1<<12))
    STRH    ie, [reg_ie]

    MOV     enable:r1, #1
    STRH    enable, [reg_ie, #0x08]         @ reg_ime

    LDR     reg_keycnt:r0, =0x04000132
    @ Start buttom interrupts
    LDR     stopkeys:r1, =((1<<3) | (1<<14))
    STRH    stopkeys, [reg_keycnt]

    @ SETUP DISPLAY

    LDR     reg_bg0cnt:r0, =0x04000008
    LDR     bg0:r1, =(1<<2)     @ character block 1
    STRH    bg0, [reg_bg0cnt]

    LDR     mem_palette:r0, =0x05000000
    LDR     white:r1, =0x7FFF
    STRH    white, [mem_palette, #2]

    LDR     cpuset_src:r0, =tilesTiles
    LDR     cpuset_dst:r1, =0x06004400  @ tile 32 of block 1
    LDR     cpuset_len:r2, =(12*16)
    SWI     0x0B    @ CpuSet

    @ SETUP AUDIO

    @ find audio data by signature
    LDR     audioptr:r1, =audiodata
    LDR     signature:r2, =0x4D414247   @ "GBAM"
search:
    ADD     audioptr, #4
    LDR     test:r3, [audioptr]
    CMP     test, signature
    BNE     search

    LDR     length:r7, [audioptr, #4]
    ADD     audioptr, #8

    @ LEFT channel: DMA 1, FIFO A
    @ RIGHT channel: DMA 2, FIFO B

    LDR     reg_base:r0, =0x04000080

    @ left channel
    STR     audioptr, [reg_base, #0x3C]   @ reg_dma1sad
    ADD     audioptr, length
    @ right channel
    STR     audioptr, [reg_base, #0x48]   @ reg_dma2sad

    LDR     sample:r2, =0
    LDR     fifo_a:r1, =0x040000A0
    STR     fifo_a, [reg_base, #0x40]       @ reg_dma1dad
    STR     sample, [fifo_a]                @ write 4 samples manually
    fifo_b:r1
    ADD     fifo_b, #4
    STR     fifo_b, [reg_base, #0x4C]       @ reg_dma2dad
    STR     sample, [fifo_b]                @ write 4 samples manually

    @ DMA enabled, start on FIFO, 32-bit, repeat
    LDR     dma_control:r1, =0xB6000000
    STR     dma_control, [reg_base, #0x44]  @ reg_dma1cnt
    STR     dma_control, [reg_base, #0x50]  @ reg_dma2cnt

    @ enable Sound A left Sound B right (timer 0) and reset FIFO
    LDR     sound:r1, =0x9A0C0000
    STR     sound, [reg_base, #0x00]        @ reg_soundcnt

    @ master enable
    LDR     sound:r1, =(1<<7)
    STR     sound, [reg_base, #0x04]

    LDR     reg_tim0cnt:r0, =0x04000100
    @ 32,768Hz, enable
    LDR     timer:r1, =0x0080FE00
    STR     timer, [reg_tim0cnt]

    @ SETUP TIME COUNTER

    @ 128 Hz (256 samples)
    LDR     timer, =0x0084FF00
    STR     timer, [reg_tim0cnt, #0x04]     @ timer 1

    LSR     length, #8      @ units of 256 samples
    @ Interrupt when song complete
    LDR     timer, =0x00C50000
    SUB     timer, length
    STR     timer, [reg_tim0cnt, #0x08]     @ timer 2

    @ draw time to screen
    LSR     time:r0, length, #7     @ seconds
    LDR     tilemap_ptr:r1, =0x06000092
    BL      draw_time
    MOV     slash:r0, #43
    SUB     tilemap_ptr, #4
    STRH    slash, [tilemap_ptr]

    @ MAIN LOOP

    @ useful memory locations
    LDR     reg_base:r4, =0x04000100
    LDR     time_tile:r5, =0x06000084

blank_screen:
    LDR     reg_dispcnt:r1, =0x04000000
    LDR     blank:r0, =(1<<7)
    STRH    blank, [reg_dispcnt]
    LDR     no_irq:r0, =0
    STRH    no_irq, [reg_dispcnt, #4]       @ reg_dispstat
    SWI     0x02   @ Halt
    LDR     reg_dispcnt:r1, =0x04000000
    LDR     display:r0, =(1<<8)     @ BG0
    STRH    display, [reg_dispcnt]
    LDR     vblank_irq:r0, =(1<<3)
    STRH    vblank_irq, [reg_dispcnt, #4]   @ reg_dispstat

    LDR     prev_key:r6, =0x03FF    @ inverse, like the register
display_loop:
    @ get current time, units of 256 samples
    LDRH    timer:r1, [reg_base, #0x08]         @ reg_tim2cnt_l
    LDR     time:r0, =0xFFFF
    SUB     time, timer
    SUB     time, length, time
    LSR     time, #7    @ seconds
    MOV     tilemap_ptr:r1, time_tile
    BL      draw_time

    SWI     0x02    @ Halt (until vblank)

    LDRH    keyinput:r0, [reg_base, #0x30]      @ reg_keyinput
    MVN     keyinput, keyinput
    MOV     key_press:r2, keyinput      @ key pressed this frame
    AND     key_press, prev_key
    MVN     prev_key, keyinput

    MOV     keytest:r1, #(1<<3)     @ Start
    TST     keytest, keyinput
    BEQ     blank_screen            @ if NOT Start held

    MOV     keytest, #(1<<0)        @ A
    TST     keytest, key_press
    BNE     toggle_pause

    MOV     keytest, #(1<<1)        @ B
    TST     keytest, key_press
    BNE     quit_thumb

    B       display_loop

quit_thumb:
    LDR     r0, =quit
    BX      r0

toggle_pause:
    LDR     reg_tim0cnt_h:r0, =0x04000102
    LDRH    enabled:r1, [reg_tim0cnt_h]
    MOV     mask:r2, #(1<<7)
    EOR     enabled, mask
    STRH    enabled, [reg_tim0cnt_h]
    B       display_loop

@ function
draw_time:
    digit0:r0       @ time in seconds, max 512
    tilemap_ptr:r1

    MOV     colon:r2, #42
    STRH    colon, [tilemap_ptr, #2]

    LDR     digit1:r2, =0x1999A     @ = 2^20 / 10
    MUL     digit1, digit0
    LSR     digit1, #20
    MOV     upper:r3, #10
    MUL     upper, digit1
    SUB     digit0, upper

    ADD     digit0, #32     @ add tile index
    STRH    digit0, [tilemap_ptr, #6]

    LDR     digit2:r0, =0x2AAAB      @ = 2^20 / 6
    MUL     digit2, digit1
    LSR     digit2, #20
    MOV     upper, #6
    MUL     upper, digit2
    SUB     digit1, upper

    ADD     digit1, #32     @ add tile index
    ADD     digit2, #32
    STRH    digit1, [tilemap_ptr, #4]
    STRH    digit2, [tilemap_ptr]

    BX      lr



    .section    .iwram, "ax", %progbits
    .align  2
    .code   32
    .arm
intrHandle:
    LDR     reg_if:r0, =0x04000202
    LDRH    irq:r1, [reg_if]
    STRH    irq, [reg_if]       @ acknowledge interrupts

    TST     irq, #(1<<5)    @ timer 2 (song complete)
    BNE     quit
    BX      lr              @ otherwise return


@ taken from pocketnes
quit:
	MOV     reg_base:r1,     #0x04000000
	MOV     zero:r0, #0
	STRH    zero, [reg_base, #0xBA]     @stop all DMA
	STRH    zero, [reg_base, #0xC6]
	STRH    zero, [reg_base, #0xD2]
	STRH    zero, [reg_base, #0xDE]
	ADD     reg_base, #0x200
	STR     zero, [reg_base, #8]        @interrupts off

    @ copy the visoly code to EWRAM and execute
	LDR     cpuset_src:r0, =VISOLY_START
	LDR     cpuset_dst:r1, =0x02000000
	LDR     cpuset_len:r2, =VISOLY_END
	SUB     cpuset_len, cpuset_src      @ subtract to get size
    LSR     cpuset_len, #1              @ hword count
    SWI     0x0B0000        @ CpuSet

    MOV     lr, cpuset_dst
    BX      lr

    .unreq  all

